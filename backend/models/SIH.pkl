{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "**Install packages + imports**"
      ],
      "metadata": {
        "id": "VuGJRaq4J6sk"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CDhB8uyxHTQN",
        "outputId": "d8dd9007-6687-4b74-f85d-20dda217f033"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Packages loaded.\n"
          ]
        }
      ],
      "source": [
        "# Install packages (run once)\n",
        "!pip install supabase nest_asyncio joblib --quiet\n",
        "\n",
        "# Core imports\n",
        "import os\n",
        "import math\n",
        "import random\n",
        "import joblib\n",
        "import nest_asyncio\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from IPython.display import display\n",
        "\n",
        "# ML imports\n",
        "from sklearn.model_selection import cross_val_score, StratifiedKFold, train_test_split\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.preprocessing import OneHotEncoder, StandardScaler, LabelEncoder\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.ensemble import RandomForestClassifier, HistGradientBoostingClassifier\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\")\n",
        "\n",
        "# For plotting aesthetics\n",
        "plt.rcParams['figure.figsize'] = (8,5)\n",
        "nest_asyncio.apply()\n",
        "print(\"Packages loaded.\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Supabase fetch with safe placeholder and CSV fallback**"
      ],
      "metadata": {
        "id": "Q6rSdrP887uZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Option A: load from Supabase (uncomment and set values)\n",
        "USE_SUPABASE = True  # set True to use Supabase\n",
        "SUPABASE_URL = \"https://gqwravnbmbfhrsskljhn.supabase.co\"\n",
        "SUPABASE_KEY = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imdxd3Jhdm5ibWJmaHJzc2tsamhuIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NzA5MjEzMiwiZXhwIjoyMDcyNjY4MTMyfQ.5Mk44RxdPSgoZ05oAt1KGKUPxJBK3X99Hsb7lsfY6S4\"  # use service role for full access\n",
        "\n",
        "df = None\n",
        "\n",
        "if USE_SUPABASE:\n",
        "    try:\n",
        "        from supabase import create_client\n",
        "        supabase = create_client(SUPABASE_URL, SUPABASE_KEY)\n",
        "        resp = supabase.table(\"sensor_data\").select(\"*\").execute()\n",
        "        df = pd.DataFrame(resp.data)\n",
        "        print(\"Loaded data from Supabase:\", df.shape)\n",
        "    except Exception as e:\n",
        "        print(\"Supabase fetch failed:\", e)\n",
        "        df = None\n",
        "\n",
        "# Option B: fallback to CSV upload if Supabase not used / fails\n",
        "if df is None:\n",
        "    print(\"Please upload your CSV file (or point to local path). Use the left Colab panel or run the upload cell below.\")\n",
        "    # Provide a helper to upload\n",
        "    from google.colab import files\n",
        "    uploaded = files.upload()  # choose file through UI\n",
        "    # assumes first uploaded file is the dataset\n",
        "    fname = next(iter(uploaded))\n",
        "    df = pd.read_csv(fname)\n",
        "    print(\"Loaded CSV:\", fname, df.shape)\n",
        "\n",
        "display(df.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 253
        },
        "id": "qAJFNZv-HZu8",
        "outputId": "06932d2d-920c-40f5-9148-88e41740a83d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loaded data from Supabase: (139, 23)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "     id  Humidity  Temperature  Soil_moisture  Light         Rain  gasRaw  \\\n",
              "0  1063        60         31.2             17      0  Not Raining     270   \n",
              "1  1064        60         31.2             17      0  Not Raining     271   \n",
              "2  1065        59         31.2             17      0  Not Raining     275   \n",
              "3  1066        59         31.2             17      0  Not Raining     276   \n",
              "4  1067        59         31.2             17      0  Not Raining     272   \n",
              "\n",
              "   gasPercent  Relay airQuality  ... Alert  crop    ax    ay    az landslide  \\\n",
              "0           6   True      Good!  ...  None  None  None  None  None      None   \n",
              "1           6   True      Good!  ...  None  None  None  None  None      None   \n",
              "2           6   True      Good!  ...  None  None  None  None  None      None   \n",
              "3           6   True      Good!  ...  None  None  None  None  None      None   \n",
              "4           6   True      Good!  ...  None  None  None  None  None      None   \n",
              "\n",
              "     gx    gy    gz fall_condition  \n",
              "0  None  None  None           None  \n",
              "1  None  None  None           None  \n",
              "2  None  None  None           None  \n",
              "3  None  None  None           None  \n",
              "4  None  None  None           None  \n",
              "\n",
              "[5 rows x 23 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6f9c9a81-d82c-439d-9785-f3d7cdab8e95\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>Humidity</th>\n",
              "      <th>Temperature</th>\n",
              "      <th>Soil_moisture</th>\n",
              "      <th>Light</th>\n",
              "      <th>Rain</th>\n",
              "      <th>gasRaw</th>\n",
              "      <th>gasPercent</th>\n",
              "      <th>Relay</th>\n",
              "      <th>airQuality</th>\n",
              "      <th>...</th>\n",
              "      <th>Alert</th>\n",
              "      <th>crop</th>\n",
              "      <th>ax</th>\n",
              "      <th>ay</th>\n",
              "      <th>az</th>\n",
              "      <th>landslide</th>\n",
              "      <th>gx</th>\n",
              "      <th>gy</th>\n",
              "      <th>gz</th>\n",
              "      <th>fall_condition</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1063</td>\n",
              "      <td>60</td>\n",
              "      <td>31.2</td>\n",
              "      <td>17</td>\n",
              "      <td>0</td>\n",
              "      <td>Not Raining</td>\n",
              "      <td>270</td>\n",
              "      <td>6</td>\n",
              "      <td>True</td>\n",
              "      <td>Good!</td>\n",
              "      <td>...</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1064</td>\n",
              "      <td>60</td>\n",
              "      <td>31.2</td>\n",
              "      <td>17</td>\n",
              "      <td>0</td>\n",
              "      <td>Not Raining</td>\n",
              "      <td>271</td>\n",
              "      <td>6</td>\n",
              "      <td>True</td>\n",
              "      <td>Good!</td>\n",
              "      <td>...</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1065</td>\n",
              "      <td>59</td>\n",
              "      <td>31.2</td>\n",
              "      <td>17</td>\n",
              "      <td>0</td>\n",
              "      <td>Not Raining</td>\n",
              "      <td>275</td>\n",
              "      <td>6</td>\n",
              "      <td>True</td>\n",
              "      <td>Good!</td>\n",
              "      <td>...</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1066</td>\n",
              "      <td>59</td>\n",
              "      <td>31.2</td>\n",
              "      <td>17</td>\n",
              "      <td>0</td>\n",
              "      <td>Not Raining</td>\n",
              "      <td>276</td>\n",
              "      <td>6</td>\n",
              "      <td>True</td>\n",
              "      <td>Good!</td>\n",
              "      <td>...</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1067</td>\n",
              "      <td>59</td>\n",
              "      <td>31.2</td>\n",
              "      <td>17</td>\n",
              "      <td>0</td>\n",
              "      <td>Not Raining</td>\n",
              "      <td>272</td>\n",
              "      <td>6</td>\n",
              "      <td>True</td>\n",
              "      <td>Good!</td>\n",
              "      <td>...</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 23 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6f9c9a81-d82c-439d-9785-f3d7cdab8e95')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6f9c9a81-d82c-439d-9785-f3d7cdab8e95 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6f9c9a81-d82c-439d-9785-f3d7cdab8e95');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-22c882fa-873b-4622-b8ba-84afcd271948\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-22c882fa-873b-4622-b8ba-84afcd271948')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-22c882fa-873b-4622-b8ba-84afcd271948 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Quick EDA (shape, missing, sample counts)**"
      ],
      "metadata": {
        "id": "YjTCs2K79IDR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Shape:\", df.shape)\n",
        "print(\"\\nColumns:\", df.columns.tolist())\n",
        "print(\"\\nInfo:\")\n",
        "display(df.info())\n",
        "\n",
        "# Missing values\n",
        "missing = df.isna().sum().sort_values(ascending=False)\n",
        "display(missing[missing > 0].head(20))\n",
        "\n",
        "# Show distribution of key target columns if present\n",
        "targets = ['Relay', 'airQuality', 'Weather', 'Pollution', 'SoilCondition', 'Alert']\n",
        "for t in targets:\n",
        "    if t in df.columns:\n",
        "        print(f\"\\nUnique values for {t} ({df[t].nunique()}):\")\n",
        "        display(df[t].value_counts(dropna=False).head(10))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "5-HAC4KHJg0x",
        "outputId": "48e364e7-57a6-42b3-ac54-1e160d37b530"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shape: (139, 23)\n",
            "\n",
            "Columns: ['id', 'Humidity', 'Temperature', 'Soil_moisture', 'Light', 'Rain', 'gasRaw', 'gasPercent', 'Relay', 'airQuality', 'Weather', 'Pollution', 'SoilCondition', 'Alert', 'crop', 'ax', 'ay', 'az', 'landslide', 'gx', 'gy', 'gz', 'fall_condition']\n",
            "\n",
            "Info:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 139 entries, 0 to 138\n",
            "Data columns (total 23 columns):\n",
            " #   Column          Non-Null Count  Dtype  \n",
            "---  ------          --------------  -----  \n",
            " 0   id              139 non-null    int64  \n",
            " 1   Humidity        139 non-null    int64  \n",
            " 2   Temperature     139 non-null    float64\n",
            " 3   Soil_moisture   139 non-null    int64  \n",
            " 4   Light           139 non-null    int64  \n",
            " 5   Rain            139 non-null    object \n",
            " 6   gasRaw          139 non-null    int64  \n",
            " 7   gasPercent      139 non-null    int64  \n",
            " 8   Relay           139 non-null    bool   \n",
            " 9   airQuality      139 non-null    object \n",
            " 10  Weather         139 non-null    object \n",
            " 11  Pollution       139 non-null    object \n",
            " 12  SoilCondition   139 non-null    object \n",
            " 13  Alert           139 non-null    object \n",
            " 14  crop            0 non-null      object \n",
            " 15  ax              0 non-null      object \n",
            " 16  ay              0 non-null      object \n",
            " 17  az              0 non-null      object \n",
            " 18  landslide       0 non-null      object \n",
            " 19  gx              0 non-null      object \n",
            " 20  gy              0 non-null      object \n",
            " 21  gz              0 non-null      object \n",
            " 22  fall_condition  0 non-null      object \n",
            "dtypes: bool(1), float64(1), int64(6), object(15)\n",
            "memory usage: 24.2+ KB\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "None"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "ay                139\n",
              "az                139\n",
              "landslide         139\n",
              "gx                139\n",
              "gy                139\n",
              "gz                139\n",
              "crop              139\n",
              "fall_condition    139\n",
              "ax                139\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>ay</th>\n",
              "      <td>139</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>az</th>\n",
              "      <td>139</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>landslide</th>\n",
              "      <td>139</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>gx</th>\n",
              "      <td>139</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>gy</th>\n",
              "      <td>139</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>gz</th>\n",
              "      <td>139</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>crop</th>\n",
              "      <td>139</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>fall_condition</th>\n",
              "      <td>139</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ax</th>\n",
              "      <td>139</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Unique values for Relay (2):\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Relay\n",
              "True     137\n",
              "False      2\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Relay</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>True</th>\n",
              "      <td>137</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>False</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Unique values for airQuality (1):\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "airQuality\n",
              "Good!    139\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>airQuality</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Good!</th>\n",
              "      <td>139</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Unique values for Weather (2):\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Weather\n",
              "Night    133\n",
              "Rainy      6\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Weather</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Night</th>\n",
              "      <td>133</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Rainy</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Unique values for Pollution (1):\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Pollution\n",
              "Good    139\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pollution</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Good</th>\n",
              "      <td>139</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Unique values for SoilCondition (1):\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "SoilCondition\n",
              "Dry    139\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SoilCondition</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Dry</th>\n",
              "      <td>139</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Unique values for Alert (1):\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Alert\n",
              "None    139\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Alert</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>None</th>\n",
              "      <td>139</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Clean & pick feature columns**"
      ],
      "metadata": {
        "id": "bR2Rkyxi9Oz0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Make a copy to work on\n",
        "data = df.copy()\n",
        "\n",
        "# Drop obviously useless columns (adjust based on your dataset)\n",
        "drop_cols = []\n",
        "# If you have id column and don't want it:\n",
        "if 'id' in data.columns:\n",
        "    drop_cols.append('id')\n",
        "# Example: raw accelerometer columns may be NaN — keep or drop if unused\n",
        "# You can customize drop_cols to your dataset\n",
        "print(\"Dropping columns:\", drop_cols)\n",
        "data = data.drop(columns=drop_cols, errors='ignore')\n",
        "\n",
        "# Show numeric / categorical split\n",
        "numeric_cols = data.select_dtypes(include=[np.number]).columns.tolist()\n",
        "cat_cols = data.select_dtypes(include=['object', 'bool', 'category']).columns.tolist()\n",
        "print(\"\\nNumeric columns:\", numeric_cols)\n",
        "print(\"Categorical columns:\", cat_cols)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l-kp5UBBJrKJ",
        "outputId": "d99de39d-8ba3-4465-bcc5-de353c99a5e3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dropping columns: ['id']\n",
            "\n",
            "Numeric columns: ['Humidity', 'Temperature', 'Soil_moisture', 'Light', 'gasRaw', 'gasPercent']\n",
            "Categorical columns: ['Rain', 'Relay', 'airQuality', 'Weather', 'Pollution', 'SoilCondition', 'Alert', 'crop', 'ax', 'ay', 'az', 'landslide', 'gx', 'gy', 'gz', 'fall_condition']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Prepare targets (LabelEncode each target)**"
      ],
      "metadata": {
        "id": "N3lJTnmq9UED"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# We'll encode each target separately with LabelEncoder\n",
        "available_targets = [t for t in targets if t in data.columns]\n",
        "print(\"Targets found:\", available_targets)\n",
        "\n",
        "# Create a dict to store label encoders and encoded labels\n",
        "label_encoders = {}\n",
        "y_encoded = {}  # will contain pandas Series of encoded labels for each target\n",
        "\n",
        "for t in available_targets:\n",
        "    le = LabelEncoder()\n",
        "    # Fill NaN before label encoding with string \"MISSING\" to keep counts\n",
        "    series = data[t].fillna(\"MISSING\").astype(str)\n",
        "    y_encoded[t] = pd.Series(le.fit_transform(series), index=series.index)\n",
        "    label_encoders[t] = le\n",
        "    print(f\"{t}: {len(le.classes_)} classes -> {le.classes_}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ITDCdSPpJvBr",
        "outputId": "eb1406c0-de92-449c-a63e-f78b963a6d7a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Targets found: ['Relay', 'airQuality', 'Weather', 'Pollution', 'SoilCondition', 'Alert']\n",
            "Relay: 2 classes -> ['False' 'True']\n",
            "airQuality: 1 classes -> ['Good!']\n",
            "Weather: 2 classes -> ['Night' 'Rainy']\n",
            "Pollution: 1 classes -> ['Good']\n",
            "SoilCondition: 1 classes -> ['Dry']\n",
            "Alert: 1 classes -> ['None']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Build preprocessing pipeline (impute numeric / categorical separately)**"
      ],
      "metadata": {
        "id": "BOIti2LF9Zsu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# -----------------------------\n",
        "# Cell 6: Prepare Feature Matrix\n",
        "# -----------------------------\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# --- Make sure your main dataset exists ---\n",
        "# If not, replace this line with your data loading method\n",
        "# Example: df = pd.read_csv(\"your_data.csv\")\n",
        "# For Supabase users, df should already be loaded from the DB\n",
        "try:\n",
        "    df\n",
        "except NameError:\n",
        "    raise NameError(\"Dataset 'df' not found. Load your dataset first!\")\n",
        "\n",
        "# --- Make a working copy of the dataset ---\n",
        "data = df.copy()\n",
        "\n",
        "# --- Define available target columns ---\n",
        "available_targets = ['Relay', 'airQuality', 'Weather', 'Pollution', 'SoilCondition', 'Alert']\n",
        "# Only keep targets that exist in your dataset\n",
        "available_targets = [t for t in available_targets if t in data.columns]\n",
        "\n",
        "# --- Drop target columns to create feature matrix X ---\n",
        "X = data.drop(columns=available_targets, errors='ignore')\n",
        "\n",
        "# --- Identify numeric and categorical features ---\n",
        "numeric_features = X.select_dtypes(include=[np.number]).columns.tolist()\n",
        "categorical_features = X.select_dtypes(exclude=[np.number]).columns.tolist()\n",
        "\n",
        "print(\"✅ Feature matrix prepared\")\n",
        "print(f\"Numeric features: {numeric_features}\")\n",
        "print(f\"Categorical features: {categorical_features}\")\n",
        "print(f\"Feature matrix shape: {X.shape}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QyuwsfoQJycE",
        "outputId": "1e0aa4b0-91bc-4aff-f651-a29178448a16"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Feature matrix prepared\n",
            "Numeric features: ['id', 'Humidity', 'Temperature', 'Soil_moisture', 'Light', 'gasRaw', 'gasPercent']\n",
            "Categorical features: ['Rain', 'crop', 'ax', 'ay', 'az', 'landslide', 'gx', 'gy', 'gz', 'fall_condition']\n",
            "Feature matrix shape: (139, 17)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Define models and helper to run CV per target**"
      ],
      "metadata": {
        "id": "F6UnMEZs9fpH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the preprocessor here\n",
        "numeric_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='mean')),\n",
        "    ('scaler', StandardScaler())\n",
        "])\n",
        "categorical_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='most_frequent')),\n",
        "    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
        "])\n",
        "preprocessor = ColumnTransformer([\n",
        "    ('num', numeric_transformer, X.select_dtypes(include=[np.number]).columns.tolist()),\n",
        "    ('cat', categorical_transformer, X.select_dtypes(exclude=[np.number]).columns.tolist())\n",
        "])\n",
        "\n",
        "# Models to compare\n",
        "models = {\n",
        "    \"preprocessor\": preprocessor, # Keep preprocessor in models for demonstration\n",
        "    \"GaussianNB\": GaussianNB(),\n",
        "    \"LogisticRegression\": LogisticRegression(max_iter=1000),\n",
        "    \"RandomForest\": RandomForestClassifier(random_state=42, n_estimators=100),\n",
        "    \"HistGradientBoosting\": HistGradientBoostingClassifier(random_state=42),\n",
        "    \"KNeighbors\": KNeighborsClassifier(),\n",
        "    \"DecisionTree\": DecisionTreeClassifier(random_state=42)\n",
        "}\n",
        "\n",
        "\n",
        "# Function: compute cross-validated accuracy for given model & target labels\n",
        "def cv_score_for_target(model, X, y, cv=5):\n",
        "    pipeline = Pipeline(steps=[('preprocessor', preprocessor), ('clf', model)])\n",
        "    # Use stratified kfold for classification when possible\n",
        "    try:\n",
        "        skf = StratifiedKFold(n_splits=cv, shuffle=True, random_state=42)\n",
        "        scores = cross_val_score(pipeline, X, y, cv=skf, scoring='accuracy', error_score='raise')\n",
        "    except Exception as e:\n",
        "        # fallback: let cross_val_score choose splits\n",
        "        scores = cross_val_score(pipeline, X, y, cv=cv, scoring='accuracy', error_score='raise')\n",
        "    return scores"
      ],
      "metadata": {
        "id": "CkJDMQ-uJ12y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Run cross-validation for each target & model (this may take a few minutes)**"
      ],
      "metadata": {
        "id": "_wXsW4_s9jhR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "results = {}  # results[target][model] = mean_accuracy\n",
        "\n",
        "for t in available_targets:\n",
        "    print(f\"\\n===== Target: {t} =====\")\n",
        "    y = y_encoded[t]\n",
        "    results[t] = {}\n",
        "    for name, model in models.items():\n",
        "        try:\n",
        "            scores = cv_score_for_target(model, X, y, cv=5)\n",
        "            mean_score = scores.mean()\n",
        "            results[t][name] = mean_score\n",
        "            print(f\"{name}: mean CV accuracy = {mean_score:.4f} (std {scores.std():.4f})\")\n",
        "        except Exception as e:\n",
        "            results[t][name] = np.nan\n",
        "            print(f\"{name}: FAILED -> {e}\")\n",
        "\n",
        "# Convert to DataFrame for easy viewing\n",
        "results_df = pd.DataFrame(results).T\n",
        "display(results_df)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "SVISGa1j9s9R",
        "outputId": "c1d6f94c-71f5-434d-a5f0-f7352df54235"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "===== Target: Relay =====\n",
            "preprocessor: FAILED -> Specifying the columns using strings is only supported for dataframes.\n",
            "GaussianNB: mean CV accuracy = 0.5161 (std 0.3682)\n",
            "LogisticRegression: mean CV accuracy = 0.9857 (std 0.0175)\n",
            "RandomForest: mean CV accuracy = 0.9857 (std 0.0175)\n",
            "HistGradientBoosting: mean CV accuracy = 0.9857 (std 0.0175)\n",
            "KNeighbors: mean CV accuracy = 0.9857 (std 0.0175)\n",
            "DecisionTree: mean CV accuracy = 0.9635 (std 0.0406)\n",
            "\n",
            "===== Target: airQuality =====\n",
            "preprocessor: FAILED -> Specifying the columns using strings is only supported for dataframes.\n",
            "GaussianNB: mean CV accuracy = 1.0000 (std 0.0000)\n",
            "LogisticRegression: FAILED -> This solver needs samples of at least 2 classes in the data, but the data contains only one class: np.int64(0)\n",
            "RandomForest: mean CV accuracy = 1.0000 (std 0.0000)\n",
            "HistGradientBoosting: mean CV accuracy = 1.0000 (std 0.0000)\n",
            "KNeighbors: mean CV accuracy = 1.0000 (std 0.0000)\n",
            "DecisionTree: mean CV accuracy = 1.0000 (std 0.0000)\n",
            "\n",
            "===== Target: Weather =====\n",
            "preprocessor: FAILED -> Specifying the columns using strings is only supported for dataframes.\n",
            "GaussianNB: mean CV accuracy = 1.0000 (std 0.0000)\n",
            "LogisticRegression: mean CV accuracy = 1.0000 (std 0.0000)\n",
            "RandomForest: mean CV accuracy = 1.0000 (std 0.0000)\n",
            "HistGradientBoosting: mean CV accuracy = 0.9569 (std 0.0349)\n",
            "KNeighbors: mean CV accuracy = 0.9857 (std 0.0175)\n",
            "DecisionTree: mean CV accuracy = 1.0000 (std 0.0000)\n",
            "\n",
            "===== Target: Pollution =====\n",
            "preprocessor: FAILED -> Specifying the columns using strings is only supported for dataframes.\n",
            "GaussianNB: mean CV accuracy = 1.0000 (std 0.0000)\n",
            "LogisticRegression: FAILED -> This solver needs samples of at least 2 classes in the data, but the data contains only one class: np.int64(0)\n",
            "RandomForest: mean CV accuracy = 1.0000 (std 0.0000)\n",
            "HistGradientBoosting: mean CV accuracy = 1.0000 (std 0.0000)\n",
            "KNeighbors: mean CV accuracy = 1.0000 (std 0.0000)\n",
            "DecisionTree: mean CV accuracy = 1.0000 (std 0.0000)\n",
            "\n",
            "===== Target: SoilCondition =====\n",
            "preprocessor: FAILED -> Specifying the columns using strings is only supported for dataframes.\n",
            "GaussianNB: mean CV accuracy = 1.0000 (std 0.0000)\n",
            "LogisticRegression: FAILED -> This solver needs samples of at least 2 classes in the data, but the data contains only one class: np.int64(0)\n",
            "RandomForest: mean CV accuracy = 1.0000 (std 0.0000)\n",
            "HistGradientBoosting: mean CV accuracy = 1.0000 (std 0.0000)\n",
            "KNeighbors: mean CV accuracy = 1.0000 (std 0.0000)\n",
            "DecisionTree: mean CV accuracy = 1.0000 (std 0.0000)\n",
            "\n",
            "===== Target: Alert =====\n",
            "preprocessor: FAILED -> Specifying the columns using strings is only supported for dataframes.\n",
            "GaussianNB: mean CV accuracy = 1.0000 (std 0.0000)\n",
            "LogisticRegression: FAILED -> This solver needs samples of at least 2 classes in the data, but the data contains only one class: np.int64(0)\n",
            "RandomForest: mean CV accuracy = 1.0000 (std 0.0000)\n",
            "HistGradientBoosting: mean CV accuracy = 1.0000 (std 0.0000)\n",
            "KNeighbors: mean CV accuracy = 1.0000 (std 0.0000)\n",
            "DecisionTree: mean CV accuracy = 1.0000 (std 0.0000)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "               preprocessor  GaussianNB  LogisticRegression  RandomForest  \\\n",
              "Relay                   NaN    0.516138            0.985714      0.985714   \n",
              "airQuality              NaN    1.000000                 NaN      1.000000   \n",
              "Weather                 NaN    1.000000            1.000000      1.000000   \n",
              "Pollution               NaN    1.000000                 NaN      1.000000   \n",
              "SoilCondition           NaN    1.000000                 NaN      1.000000   \n",
              "Alert                   NaN    1.000000                 NaN      1.000000   \n",
              "\n",
              "               HistGradientBoosting  KNeighbors  DecisionTree  \n",
              "Relay                      0.985714    0.985714      0.963492  \n",
              "airQuality                 1.000000    1.000000      1.000000  \n",
              "Weather                    0.956878    0.985714      1.000000  \n",
              "Pollution                  1.000000    1.000000      1.000000  \n",
              "SoilCondition              1.000000    1.000000      1.000000  \n",
              "Alert                      1.000000    1.000000      1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e21319a7-b16b-4758-96b3-6412fdac87b1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>preprocessor</th>\n",
              "      <th>GaussianNB</th>\n",
              "      <th>LogisticRegression</th>\n",
              "      <th>RandomForest</th>\n",
              "      <th>HistGradientBoosting</th>\n",
              "      <th>KNeighbors</th>\n",
              "      <th>DecisionTree</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Relay</th>\n",
              "      <td>NaN</td>\n",
              "      <td>0.516138</td>\n",
              "      <td>0.985714</td>\n",
              "      <td>0.985714</td>\n",
              "      <td>0.985714</td>\n",
              "      <td>0.985714</td>\n",
              "      <td>0.963492</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>airQuality</th>\n",
              "      <td>NaN</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Weather</th>\n",
              "      <td>NaN</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.956878</td>\n",
              "      <td>0.985714</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pollution</th>\n",
              "      <td>NaN</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SoilCondition</th>\n",
              "      <td>NaN</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Alert</th>\n",
              "      <td>NaN</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e21319a7-b16b-4758-96b3-6412fdac87b1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e21319a7-b16b-4758-96b3-6412fdac87b1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e21319a7-b16b-4758-96b3-6412fdac87b1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-8db98284-67ef-4c46-9cc6-0ffcdcda0f63\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8db98284-67ef-4c46-9cc6-0ffcdcda0f63')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-8db98284-67ef-4c46-9cc6-0ffcdcda0f63 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_f65a33d0-43f7-4003-9dff-c424445cc2ea\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('results_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_f65a33d0-43f7-4003-9dff-c424445cc2ea button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('results_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "results_df",
              "summary": "{\n  \"name\": \"results_df\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"preprocessor\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GaussianNB\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.19753601144402264,\n        \"min\": 0.5161375661375661,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LogisticRegression\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.01010152544552207,\n        \"min\": 0.9857142857142858,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RandomForest\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0058321184351980224,\n        \"min\": 0.9857142857142858,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HistGradientBoosting\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.01740283681546117,\n        \"min\": 0.956878306878307,\n        \"max\": 1.0,\n        \"num_unique_values\": 3,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KNeighbors\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.007377111135633148,\n        \"min\": 0.9857142857142858,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DecisionTree\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.01490430266772828,\n        \"min\": 0.9634920634920636,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Plot comparison chart**"
      ],
      "metadata": {
        "id": "H7lL7yok9u4J"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot bar chart per target (accuracy)\n",
        "for t in results_df.index:\n",
        "    vals = results_df.loc[t].dropna()\n",
        "    if vals.empty:\n",
        "        continue\n",
        "    vals.sort_values(ascending=False).plot(kind='bar', title=f\"Model CV Accuracies for {t}\")\n",
        "    plt.ylabel(\"Mean CV Accuracy\")\n",
        "    plt.ylim(0,1.05)\n",
        "    plt.show()\n"
      ],
      "metadata": {
        "id": "fX9MZhtQ-iMa",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "81965178-39dd-45c5-cc7e-741d1086a07d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Pick best model per target, train final model, evaluate on holdout test set**"
      ],
      "metadata": {
        "id": "UZGvgolz-kBF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# --- Clean target ---\n",
        "# Drop rows with missing target\n",
        "data = data.dropna(subset=['Relay'])\n",
        "y_labels = data['Relay']\n",
        "X = data.drop(columns=['Relay'], errors='ignore')\n",
        "\n",
        "# If target is boolean with None, convert\n",
        "y_labels = y_labels.fillna(False)\n",
        "if y_labels.dtype != 'int' and y_labels.dtype != 'bool':\n",
        "    # Convert to int (0/1)\n",
        "    y_labels = y_labels.astype(int)\n",
        "\n",
        "# --- Split data ---\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y_labels, test_size=0.2, random_state=42\n",
        ")\n",
        "\n",
        "# --- Numeric / categorical columns ---\n",
        "numeric_features = X.select_dtypes(include=[np.number]).columns.tolist()\n",
        "categorical_features = X.select_dtypes(exclude=[np.number]).columns.tolist()\n",
        "\n",
        "# --- Preprocessor ---\n",
        "numeric_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='mean')),\n",
        "    ('scaler', StandardScaler())\n",
        "])\n",
        "categorical_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='most_frequent')),\n",
        "    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
        "])\n",
        "preprocessor = ColumnTransformer([\n",
        "    ('num', numeric_transformer, numeric_features),\n",
        "    ('cat', categorical_transformer, categorical_features)\n",
        "])\n",
        "\n",
        "# --- Models (use only compatible classifier) ---\n",
        "models = {\n",
        "    \"GaussianNB\": GaussianNB(),\n",
        "    \"RandomForest\": RandomForestClassifier(random_state=42)\n",
        "}\n",
        "\n",
        "best_model = None\n",
        "best_model_name = None\n",
        "best_score = 0\n",
        "\n",
        "for name, model in models.items():\n",
        "    pipeline = Pipeline([('preprocessor', preprocessor), ('clf', model)])\n",
        "    try:\n",
        "        scores = cross_val_score(pipeline, X_train, y_train, cv=5, scoring='accuracy')\n",
        "        mean_score = scores.mean()\n",
        "        print(f\"{name} Mean CV Accuracy: {mean_score:.4f}\")\n",
        "        if mean_score > best_score:\n",
        "            best_score = mean_score\n",
        "            best_model = model\n",
        "            best_model_name = name\n",
        "    except Exception as e:\n",
        "        print(f\"{name} failed: {e}\")\n",
        "\n",
        "if best_model is not None:\n",
        "    final_pipeline = Pipeline([('preprocessor', preprocessor), ('clf', best_model)])\n",
        "    final_pipeline.fit(X_train, y_train)\n",
        "    y_pred = final_pipeline.predict(X_test)\n",
        "    print(f\"\\n✅ Best Model: {best_model_name} | Test Accuracy: {accuracy_score(y_test, y_pred):.4f}\")\n",
        "else:\n",
        "    print(\"❌ No model could be trained. Check your target variable and preprocessing.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZD1Cuo479ifG",
        "outputId": "f8f87de8-7f9a-40c8-90d7-854a56482bb7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "GaussianNB Mean CV Accuracy: 0.5368\n",
            "RandomForest Mean CV Accuracy: 0.9822\n",
            "\n",
            "✅ Best Model: RandomForest | Test Accuracy: 1.0000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "B6ARKVvVLwwE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Save best pipelines to disk (joblib)**"
      ],
      "metadata": {
        "id": "6JVV8OCW-1Yq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "final_models = {}\n",
        "\n",
        "# Example: store the trained pipeline for 'Relay'\n",
        "final_models['Relay'] = final_pipeline\n",
        "\n",
        "# Save all pipelines\n",
        "os.makedirs('/content/models', exist_ok=True)\n",
        "for t, pipeline in final_models.items():\n",
        "    fname = f\"/content/models/{t}.joblib\"\n",
        "    joblib.dump(pipeline, fname)\n",
        "    print(\"Saved:\", fname)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FzK-bKfS-nMK",
        "outputId": "5eb831a1-a0c0-46fa-c1c7-329ee1c17949"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saved: /content/models/Relay.joblib\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Quick inference demo (use first row of X)**"
      ],
      "metadata": {
        "id": "UYMdsqlB-4DV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Demo: load saved model and predict on a single row\n",
        "sample = X.iloc[[0]]  # keep as DataFrame\n",
        "print(\"Sample features (first row):\")\n",
        "display(sample)\n",
        "\n",
        "for t in final_models:\n",
        "    pipe = final_models[t]\n",
        "    pred = pipe.predict(sample)\n",
        "    # convert label back to original string\n",
        "    label = label_encoders[t].inverse_transform(pred.astype(int))\n",
        "    print(f\"Target: {t} -> Predicted label: {label[0]}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 145
        },
        "id": "h4yTEzvu-3n3",
        "outputId": "3554b5a7-c870-492b-c6a5-f5fed49581a3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sample features (first row):\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "     id  Humidity  Temperature  Soil_moisture  Light         Rain  gasRaw  \\\n",
              "0  1063        60         31.2             17      0  Not Raining     270   \n",
              "\n",
              "   gasPercent airQuality Weather  ... Alert  crop    ax    ay    az landslide  \\\n",
              "0           6      Good!   Night  ...  None  None  None  None  None      None   \n",
              "\n",
              "     gx    gy    gz fall_condition  \n",
              "0  None  None  None           None  \n",
              "\n",
              "[1 rows x 22 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3bb7fe20-c7bb-4ef2-818d-cbaab078deb3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>Humidity</th>\n",
              "      <th>Temperature</th>\n",
              "      <th>Soil_moisture</th>\n",
              "      <th>Light</th>\n",
              "      <th>Rain</th>\n",
              "      <th>gasRaw</th>\n",
              "      <th>gasPercent</th>\n",
              "      <th>airQuality</th>\n",
              "      <th>Weather</th>\n",
              "      <th>...</th>\n",
              "      <th>Alert</th>\n",
              "      <th>crop</th>\n",
              "      <th>ax</th>\n",
              "      <th>ay</th>\n",
              "      <th>az</th>\n",
              "      <th>landslide</th>\n",
              "      <th>gx</th>\n",
              "      <th>gy</th>\n",
              "      <th>gz</th>\n",
              "      <th>fall_condition</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1063</td>\n",
              "      <td>60</td>\n",
              "      <td>31.2</td>\n",
              "      <td>17</td>\n",
              "      <td>0</td>\n",
              "      <td>Not Raining</td>\n",
              "      <td>270</td>\n",
              "      <td>6</td>\n",
              "      <td>Good!</td>\n",
              "      <td>Night</td>\n",
              "      <td>...</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1 rows × 22 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3bb7fe20-c7bb-4ef2-818d-cbaab078deb3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3bb7fe20-c7bb-4ef2-818d-cbaab078deb3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3bb7fe20-c7bb-4ef2-818d-cbaab078deb3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_8d2a3a4c-8b32-4dbf-a378-52f53b81c887\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('sample')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_8d2a3a4c-8b32-4dbf-a378-52f53b81c887 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('sample');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "sample"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Target: Relay -> Predicted label: True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Realtime listener (Supabase) — only if you use Supabase & want live triggers**"
      ],
      "metadata": {
        "id": "irHCIStS-9bY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Optional: Realtime listener for Supabase inserts.\n",
        "# WARNING: This works only if 'realtime' is enabled on your Supabase project and you provide valid credentials.\n",
        "# Also, Colab's cell must keep running (use await listen() in an interactive cell).\n",
        "\n",
        "USE_REALTIME = False\n",
        "\n",
        "if USE_REALTIME and USE_SUPABASE:\n",
        "    import asyncio\n",
        "    from supabase import create_async_client\n",
        "\n",
        "    async def listen_changes():\n",
        "        supabase_async = await create_async_client(SUPABASE_URL, SUPABASE_KEY)\n",
        "        async def handler(payload):\n",
        "            print(\"New insert payload:\", payload)\n",
        "            # Example: take new row, run inference using final_models for each target\n",
        "            new_row = payload.get('record')\n",
        "            if new_row:\n",
        "                # Convert to dataframe-like row similar to X\n",
        "                row_df = pd.DataFrame([new_row])\n",
        "                # Drop target columns if any\n",
        "                row_df = row_df.drop(columns=available_targets, errors='ignore')\n",
        "                for t, pipe in final_models.items():\n",
        "                    try:\n",
        "                        p = pipe.predict(row_df)\n",
        "                        label = label_encoders[t].inverse_transform(p.astype(int))\n",
        "                        print(f\"Realtime -> {t}: {label[0]}\")\n",
        "                    except Exception as ex:\n",
        "                        print(\"Inference error:\", ex)\n",
        "        channel = supabase_async.realtime.channel(\"sensor_data_changes\")\n",
        "        channel.on(\"postgres_changes\", {\"event\":\"INSERT\",\"schema\":\"public\",\"table\":\"sensor_data\"}, handler)\n",
        "        await channel.subscribe()\n",
        "        print(\"Subscribed to realtime channel. Listening...\")\n",
        "        while True:\n",
        "            await asyncio.sleep(1)\n",
        "\n",
        "    # To run:\n",
        "    # await listen_changes()\n"
      ],
      "metadata": {
        "id": "JISx7G1j-71p"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Summary & Notes**"
      ],
      "metadata": {
        "id": "KU0kbOlK_A5Q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# Initialize evaluation dictionary\n",
        "evaluation = {}\n",
        "\n",
        "# Loop over all targets and their trained pipelines\n",
        "for target_name, pipeline in final_models.items():\n",
        "    # Predict on holdout test set\n",
        "    # X_test_target = X_test[target_name] if isinstance(X_test, dict) else X_test\n",
        "    # y_test_target = y_test[target_name] if isinstance(y_test, dict) else y_test[target_name]\n",
        "\n",
        "    y_pred = pipeline.predict(X_test)\n",
        "\n",
        "    # Store evaluation info\n",
        "    evaluation[target_name] = {\n",
        "        'model_name': type(pipeline.named_steps['clf']).__name__,\n",
        "        'test_accuracy': accuracy_score(y_test, y_pred)\n",
        "    }\n",
        "\n",
        "# Print summary\n",
        "print(\"Notebook run completed.\")\n",
        "print(\"\\nSummary of final evaluation (test accuracy):\")\n",
        "for t, info in evaluation.items():\n",
        "    print(f\"- {t}: {info['model_name']} -> test accuracy = {info['test_accuracy']:.4f}\")\n",
        "\n",
        "print(\"\\nNotes / Next steps:\")\n",
        "print(\"1) If you saw suspiciously high accuracy, check for data leakage (shared derived columns).\")\n",
        "print(\"2) If classes are extremely imbalanced, consider precision/recall or class-weighted models.\")\n",
        "print(\"3) You can tune hyperparameters with GridSearchCV or RandomizedSearchCV per-target.\")\n",
        "print(\"4) Store models safely (do NOT commit service_role keys).\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bCgS7ok2-_8D",
        "outputId": "3afdfb3e-6025-4c3b-8be1-4703c2d1958c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Notebook run completed.\n",
            "\n",
            "Summary of final evaluation (test accuracy):\n",
            "- Relay: RandomForestClassifier -> test accuracy = 1.0000\n",
            "\n",
            "Notes / Next steps:\n",
            "1) If you saw suspiciously high accuracy, check for data leakage (shared derived columns).\n",
            "2) If classes are extremely imbalanced, consider precision/recall or class-weighted models.\n",
            "3) You can tune hyperparameters with GridSearchCV or RandomizedSearchCV per-target.\n",
            "4) Store models safely (do NOT commit service_role keys).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "kExcijHr_Fny"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}